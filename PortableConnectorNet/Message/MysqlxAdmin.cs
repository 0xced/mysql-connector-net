// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Mysqlx.Admin {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal static partial class MysqlxAdmin {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Admin_CommandExecute__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Admin.CommandExecute, global::Mysqlx.Admin.CommandExecute.Builder> internal__static_Mysqlx_Admin_CommandExecute__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Mysqlx_Admin_CommandExecute_Argument__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Admin.CommandExecute.Types.Argument, global::Mysqlx.Admin.CommandExecute.Types.Argument.Builder> internal__static_Mysqlx_Admin_CommandExecute_Argument__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static MysqlxAdmin() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChJteXNxbHhfYWRtaW4ucHJvdG8SDE15c3FseC5BZG1pbhoRbXlzcWx4X2V4" + 
          "cHIucHJvdG8aFm15c3FseF9kYXRhdHlwZXMucHJvdG8ijQMKDkNvbW1hbmRF" + 
          "eGVjdXRlEg8KB2NvbW1hbmQYASACKAkSMwoEYXJncxgCIAMoCzIlLk15c3Fs" + 
          "eC5BZG1pbi5Db21tYW5kRXhlY3V0ZS5Bcmd1bWVudBq0AgoIQXJndW1lbnQS" + 
          "OAoEdHlwZRgBIAIoDjIqLk15c3FseC5BZG1pbi5Db21tYW5kRXhlY3V0ZS5B" + 
          "cmd1bWVudC5UeXBlEigKBnNjYWxhchgCIAEoCzIYLk15c3FseC5EYXRhdHlw" + 
          "ZXMuU2NhbGFyEjQKDWRvY3VtZW50X3BhdGgYAyADKAsyHS5NeXNxbHguRXhw" + 
          "ci5Eb2N1bWVudFBhdGhJdGVtEiYKBWFycmF5GAQgASgLMhcuTXlzcWx4LkRh" + 
          "dGF0eXBlcy5BcnJheRIoCgZvYmplY3QYBSABKAsyGC5NeXNxbHguRGF0YXR5" + 
          "cGVzLk9iamVjdCI8CgRUeXBlEgoKBlNDQUxBUhABEhEKDURPQ1VNRU5UX1BB" + 
          "VEgQAhIJCgVBUlJBWRADEgoKBk9CSkVDVBAE");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Mysqlx_Admin_CommandExecute__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Mysqlx_Admin_CommandExecute__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Admin.CommandExecute, global::Mysqlx.Admin.CommandExecute.Builder>(internal__static_Mysqlx_Admin_CommandExecute__Descriptor,
                new string[] { "Command", "Args", });
        internal__static_Mysqlx_Admin_CommandExecute_Argument__Descriptor = internal__static_Mysqlx_Admin_CommandExecute__Descriptor.NestedTypes[0];
        internal__static_Mysqlx_Admin_CommandExecute_Argument__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Mysqlx.Admin.CommandExecute.Types.Argument, global::Mysqlx.Admin.CommandExecute.Types.Argument.Builder>(internal__static_Mysqlx_Admin_CommandExecute_Argument__Descriptor,
                new string[] { "Type", "Scalar", "DocumentPath", "Array", "Object", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Mysqlx.Expr.MysqlxExpr.Descriptor, 
          global::Mysqlx.Datatypes.MysqlxDatatypes.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  internal sealed partial class CommandExecute : pb::GeneratedMessage<CommandExecute, CommandExecute.Builder> {
    private CommandExecute() { }
    private static readonly CommandExecute defaultInstance = new CommandExecute().MakeReadOnly();
    private static readonly string[] _commandExecuteFieldNames = new string[] { "args", "command" };
    private static readonly uint[] _commandExecuteFieldTags = new uint[] { 18, 10 };
    public static CommandExecute DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CommandExecute DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CommandExecute ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Mysqlx.Admin.MysqlxAdmin.internal__static_Mysqlx_Admin_CommandExecute__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CommandExecute, CommandExecute.Builder> InternalFieldAccessors {
      get { return global::Mysqlx.Admin.MysqlxAdmin.internal__static_Mysqlx_Admin_CommandExecute__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      internal sealed partial class Argument : pb::GeneratedMessage<Argument, Argument.Builder> {
        private Argument() { }
        private static readonly Argument defaultInstance = new Argument().MakeReadOnly();
        private static readonly string[] _argumentFieldNames = new string[] { "array", "document_path", "object", "scalar", "type" };
        private static readonly uint[] _argumentFieldTags = new uint[] { 34, 26, 42, 18, 8 };
        public static Argument DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Argument DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Argument ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::Mysqlx.Admin.MysqlxAdmin.internal__static_Mysqlx_Admin_CommandExecute_Argument__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Argument, Argument.Builder> InternalFieldAccessors {
          get { return global::Mysqlx.Admin.MysqlxAdmin.internal__static_Mysqlx_Admin_CommandExecute_Argument__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types {
          internal enum Type {
            SCALAR = 1,
            DOCUMENT_PATH = 2,
            ARRAY = 3,
            OBJECT = 4,
          }
          
        }
        #endregion
        
        public const int TypeFieldNumber = 1;
        private bool hasType;
        private global::Mysqlx.Admin.CommandExecute.Types.Argument.Types.Type type_ = global::Mysqlx.Admin.CommandExecute.Types.Argument.Types.Type.SCALAR;
        public bool HasType {
          get { return hasType; }
        }
        public global::Mysqlx.Admin.CommandExecute.Types.Argument.Types.Type Type {
          get { return type_; }
        }
        
        public const int ScalarFieldNumber = 2;
        private bool hasScalar;
        private global::Mysqlx.Datatypes.Scalar scalar_;
        public bool HasScalar {
          get { return hasScalar; }
        }
        public global::Mysqlx.Datatypes.Scalar Scalar {
          get { return scalar_ ?? global::Mysqlx.Datatypes.Scalar.DefaultInstance; }
        }
        
        public const int DocumentPathFieldNumber = 3;
        private pbc::PopsicleList<global::Mysqlx.Expr.DocumentPathItem> documentPath_ = new pbc::PopsicleList<global::Mysqlx.Expr.DocumentPathItem>();
        public scg::IList<global::Mysqlx.Expr.DocumentPathItem> DocumentPathList {
          get { return documentPath_; }
        }
        public int DocumentPathCount {
          get { return documentPath_.Count; }
        }
        public global::Mysqlx.Expr.DocumentPathItem GetDocumentPath(int index) {
          return documentPath_[index];
        }
        
        public const int ArrayFieldNumber = 4;
        private bool hasArray;
        private global::Mysqlx.Datatypes.Array array_;
        public bool HasArray {
          get { return hasArray; }
        }
        public global::Mysqlx.Datatypes.Array Array {
          get { return array_ ?? global::Mysqlx.Datatypes.Array.DefaultInstance; }
        }
        
        public const int ObjectFieldNumber = 5;
        private bool hasObject;
        private global::Mysqlx.Datatypes.Object object_;
        public bool HasObject {
          get { return hasObject; }
        }
        public global::Mysqlx.Datatypes.Object Object {
          get { return object_ ?? global::Mysqlx.Datatypes.Object.DefaultInstance; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasType) return false;
            if (HasScalar) {
              if (!Scalar.IsInitialized) return false;
            }
            foreach (global::Mysqlx.Expr.DocumentPathItem element in DocumentPathList) {
              if (!element.IsInitialized) return false;
            }
            if (HasArray) {
              if (!Array.IsInitialized) return false;
            }
            if (HasObject) {
              if (!Object.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _argumentFieldNames;
          if (hasType) {
            output.WriteEnum(1, field_names[4], (int) Type, Type);
          }
          if (hasScalar) {
            output.WriteMessage(2, field_names[3], Scalar);
          }
          if (documentPath_.Count > 0) {
            output.WriteMessageArray(3, field_names[1], documentPath_);
          }
          if (hasArray) {
            output.WriteMessage(4, field_names[0], Array);
          }
          if (hasObject) {
            output.WriteMessage(5, field_names[2], Object);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasType) {
              size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
            }
            if (hasScalar) {
              size += pb::CodedOutputStream.ComputeMessageSize(2, Scalar);
            }
            foreach (global::Mysqlx.Expr.DocumentPathItem element in DocumentPathList) {
              size += pb::CodedOutputStream.ComputeMessageSize(3, element);
            }
            if (hasArray) {
              size += pb::CodedOutputStream.ComputeMessageSize(4, Array);
            }
            if (hasObject) {
              size += pb::CodedOutputStream.ComputeMessageSize(5, Object);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Argument ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Argument ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Argument ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Argument ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Argument ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Argument ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Argument ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Argument ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Argument ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Argument ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Argument MakeReadOnly() {
          documentPath_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Argument prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal sealed partial class Builder : pb::GeneratedBuilder<Argument, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Argument cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Argument result;
          
          private Argument PrepareBuilder() {
            if (resultIsReadOnly) {
              Argument original = result;
              result = new Argument();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Argument MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::Mysqlx.Admin.CommandExecute.Types.Argument.Descriptor; }
          }
          
          public override Argument DefaultInstanceForType {
            get { return global::Mysqlx.Admin.CommandExecute.Types.Argument.DefaultInstance; }
          }
          
          public override Argument BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Argument) {
              return MergeFrom((Argument) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Argument other) {
            if (other == global::Mysqlx.Admin.CommandExecute.Types.Argument.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasType) {
              Type = other.Type;
            }
            if (other.HasScalar) {
              MergeScalar(other.Scalar);
            }
            if (other.documentPath_.Count != 0) {
              result.documentPath_.Add(other.documentPath_);
            }
            if (other.HasArray) {
              MergeArray(other.Array);
            }
            if (other.HasObject) {
              MergeObject(other.Object);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_argumentFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _argumentFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  object unknown;
                  if(input.ReadEnum(ref result.type_, out unknown)) {
                    result.hasType = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(1, (ulong)(int)unknown);
                  }
                  break;
                }
                case 18: {
                  global::Mysqlx.Datatypes.Scalar.Builder subBuilder = global::Mysqlx.Datatypes.Scalar.CreateBuilder();
                  if (result.hasScalar) {
                    subBuilder.MergeFrom(Scalar);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Scalar = subBuilder.BuildPartial();
                  break;
                }
                case 26: {
                  input.ReadMessageArray(tag, field_name, result.documentPath_, global::Mysqlx.Expr.DocumentPathItem.DefaultInstance, extensionRegistry);
                  break;
                }
                case 34: {
                  global::Mysqlx.Datatypes.Array.Builder subBuilder = global::Mysqlx.Datatypes.Array.CreateBuilder();
                  if (result.hasArray) {
                    subBuilder.MergeFrom(Array);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Array = subBuilder.BuildPartial();
                  break;
                }
                case 42: {
                  global::Mysqlx.Datatypes.Object.Builder subBuilder = global::Mysqlx.Datatypes.Object.CreateBuilder();
                  if (result.hasObject) {
                    subBuilder.MergeFrom(Object);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Object = subBuilder.BuildPartial();
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasType {
           get { return result.hasType; }
          }
          public global::Mysqlx.Admin.CommandExecute.Types.Argument.Types.Type Type {
            get { return result.Type; }
            set { SetType(value); }
          }
          public Builder SetType(global::Mysqlx.Admin.CommandExecute.Types.Argument.Types.Type value) {
            PrepareBuilder();
            result.hasType = true;
            result.type_ = value;
            return this;
          }
          public Builder ClearType() {
            PrepareBuilder();
            result.hasType = false;
            result.type_ = global::Mysqlx.Admin.CommandExecute.Types.Argument.Types.Type.SCALAR;
            return this;
          }
          
          public bool HasScalar {
           get { return result.hasScalar; }
          }
          public global::Mysqlx.Datatypes.Scalar Scalar {
            get { return result.Scalar; }
            set { SetScalar(value); }
          }
          public Builder SetScalar(global::Mysqlx.Datatypes.Scalar value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasScalar = true;
            result.scalar_ = value;
            return this;
          }
          public Builder SetScalar(global::Mysqlx.Datatypes.Scalar.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasScalar = true;
            result.scalar_ = builderForValue.Build();
            return this;
          }
          public Builder MergeScalar(global::Mysqlx.Datatypes.Scalar value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasScalar &&
                result.scalar_ != global::Mysqlx.Datatypes.Scalar.DefaultInstance) {
                result.scalar_ = global::Mysqlx.Datatypes.Scalar.CreateBuilder(result.scalar_).MergeFrom(value).BuildPartial();
            } else {
              result.scalar_ = value;
            }
            result.hasScalar = true;
            return this;
          }
          public Builder ClearScalar() {
            PrepareBuilder();
            result.hasScalar = false;
            result.scalar_ = null;
            return this;
          }
          
          public pbc::IPopsicleList<global::Mysqlx.Expr.DocumentPathItem> DocumentPathList {
            get { return PrepareBuilder().documentPath_; }
          }
          public int DocumentPathCount {
            get { return result.DocumentPathCount; }
          }
          public global::Mysqlx.Expr.DocumentPathItem GetDocumentPath(int index) {
            return result.GetDocumentPath(index);
          }
          public Builder SetDocumentPath(int index, global::Mysqlx.Expr.DocumentPathItem value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.documentPath_[index] = value;
            return this;
          }
          public Builder SetDocumentPath(int index, global::Mysqlx.Expr.DocumentPathItem.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.documentPath_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddDocumentPath(global::Mysqlx.Expr.DocumentPathItem value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.documentPath_.Add(value);
            return this;
          }
          public Builder AddDocumentPath(global::Mysqlx.Expr.DocumentPathItem.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.documentPath_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeDocumentPath(scg::IEnumerable<global::Mysqlx.Expr.DocumentPathItem> values) {
            PrepareBuilder();
            result.documentPath_.Add(values);
            return this;
          }
          public Builder ClearDocumentPath() {
            PrepareBuilder();
            result.documentPath_.Clear();
            return this;
          }
          
          public bool HasArray {
           get { return result.hasArray; }
          }
          public global::Mysqlx.Datatypes.Array Array {
            get { return result.Array; }
            set { SetArray(value); }
          }
          public Builder SetArray(global::Mysqlx.Datatypes.Array value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasArray = true;
            result.array_ = value;
            return this;
          }
          public Builder SetArray(global::Mysqlx.Datatypes.Array.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasArray = true;
            result.array_ = builderForValue.Build();
            return this;
          }
          public Builder MergeArray(global::Mysqlx.Datatypes.Array value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasArray &&
                result.array_ != global::Mysqlx.Datatypes.Array.DefaultInstance) {
                result.array_ = global::Mysqlx.Datatypes.Array.CreateBuilder(result.array_).MergeFrom(value).BuildPartial();
            } else {
              result.array_ = value;
            }
            result.hasArray = true;
            return this;
          }
          public Builder ClearArray() {
            PrepareBuilder();
            result.hasArray = false;
            result.array_ = null;
            return this;
          }
          
          public bool HasObject {
           get { return result.hasObject; }
          }
          public global::Mysqlx.Datatypes.Object Object {
            get { return result.Object; }
            set { SetObject(value); }
          }
          public Builder SetObject(global::Mysqlx.Datatypes.Object value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasObject = true;
            result.object_ = value;
            return this;
          }
          public Builder SetObject(global::Mysqlx.Datatypes.Object.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasObject = true;
            result.object_ = builderForValue.Build();
            return this;
          }
          public Builder MergeObject(global::Mysqlx.Datatypes.Object value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasObject &&
                result.object_ != global::Mysqlx.Datatypes.Object.DefaultInstance) {
                result.object_ = global::Mysqlx.Datatypes.Object.CreateBuilder(result.object_).MergeFrom(value).BuildPartial();
            } else {
              result.object_ = value;
            }
            result.hasObject = true;
            return this;
          }
          public Builder ClearObject() {
            PrepareBuilder();
            result.hasObject = false;
            result.object_ = null;
            return this;
          }
        }
        static Argument() {
          object.ReferenceEquals(global::Mysqlx.Admin.MysqlxAdmin.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int CommandFieldNumber = 1;
    private bool hasCommand;
    private string command_ = "";
    public bool HasCommand {
      get { return hasCommand; }
    }
    public string Command {
      get { return command_; }
    }
    
    public const int ArgsFieldNumber = 2;
    private pbc::PopsicleList<global::Mysqlx.Admin.CommandExecute.Types.Argument> args_ = new pbc::PopsicleList<global::Mysqlx.Admin.CommandExecute.Types.Argument>();
    public scg::IList<global::Mysqlx.Admin.CommandExecute.Types.Argument> ArgsList {
      get { return args_; }
    }
    public int ArgsCount {
      get { return args_.Count; }
    }
    public global::Mysqlx.Admin.CommandExecute.Types.Argument GetArgs(int index) {
      return args_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCommand) return false;
        foreach (global::Mysqlx.Admin.CommandExecute.Types.Argument element in ArgsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _commandExecuteFieldNames;
      if (hasCommand) {
        output.WriteString(1, field_names[1], Command);
      }
      if (args_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], args_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCommand) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Command);
        }
        foreach (global::Mysqlx.Admin.CommandExecute.Types.Argument element in ArgsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CommandExecute ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CommandExecute ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CommandExecute ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CommandExecute ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CommandExecute ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CommandExecute ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CommandExecute ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CommandExecute ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CommandExecute ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CommandExecute ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CommandExecute MakeReadOnly() {
      args_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CommandExecute prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal sealed partial class Builder : pb::GeneratedBuilder<CommandExecute, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CommandExecute cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CommandExecute result;
      
      private CommandExecute PrepareBuilder() {
        if (resultIsReadOnly) {
          CommandExecute original = result;
          result = new CommandExecute();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CommandExecute MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Mysqlx.Admin.CommandExecute.Descriptor; }
      }
      
      public override CommandExecute DefaultInstanceForType {
        get { return global::Mysqlx.Admin.CommandExecute.DefaultInstance; }
      }
      
      public override CommandExecute BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CommandExecute) {
          return MergeFrom((CommandExecute) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CommandExecute other) {
        if (other == global::Mysqlx.Admin.CommandExecute.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCommand) {
          Command = other.Command;
        }
        if (other.args_.Count != 0) {
          result.args_.Add(other.args_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_commandExecuteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _commandExecuteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCommand = input.ReadString(ref result.command_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.args_, global::Mysqlx.Admin.CommandExecute.Types.Argument.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCommand {
        get { return result.hasCommand; }
      }
      public string Command {
        get { return result.Command; }
        set { SetCommand(value); }
      }
      public Builder SetCommand(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCommand = true;
        result.command_ = value;
        return this;
      }
      public Builder ClearCommand() {
        PrepareBuilder();
        result.hasCommand = false;
        result.command_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::Mysqlx.Admin.CommandExecute.Types.Argument> ArgsList {
        get { return PrepareBuilder().args_; }
      }
      public int ArgsCount {
        get { return result.ArgsCount; }
      }
      public global::Mysqlx.Admin.CommandExecute.Types.Argument GetArgs(int index) {
        return result.GetArgs(index);
      }
      public Builder SetArgs(int index, global::Mysqlx.Admin.CommandExecute.Types.Argument value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.args_[index] = value;
        return this;
      }
      public Builder SetArgs(int index, global::Mysqlx.Admin.CommandExecute.Types.Argument.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.args_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddArgs(global::Mysqlx.Admin.CommandExecute.Types.Argument value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.args_.Add(value);
        return this;
      }
      public Builder AddArgs(global::Mysqlx.Admin.CommandExecute.Types.Argument.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.args_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeArgs(scg::IEnumerable<global::Mysqlx.Admin.CommandExecute.Types.Argument> values) {
        PrepareBuilder();
        result.args_.Add(values);
        return this;
      }
      public Builder ClearArgs() {
        PrepareBuilder();
        result.args_.Clear();
        return this;
      }
    }
    static CommandExecute() {
      object.ReferenceEquals(global::Mysqlx.Admin.MysqlxAdmin.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
